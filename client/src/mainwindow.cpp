// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
#include "mainwindow.h"       // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Å–∞
#include "ui_mainwindow.h"    // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π UI-–∫–ª–∞—Å—Å –∏–∑ .ui —Ñ–∞–π–ª–∞
#include <QMessageBox>        // –î–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#include <QJsonObject>        // –†–∞–±–æ—Ç–∞ —Å JSON-–æ–±—ä–µ–∫—Ç–∞–º–∏
#include <QJsonDocument>      // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON
#include "networkclient.h"
#include <QJsonArray>    // –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
#include <QKeyEvent>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    , ui(new Ui::MainWindow)  // –°–æ–∑–¥–∞–Ω–∏–µ UI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    , uravCount(2)            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π (—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
{
    ui->setupUi(this); // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –∏–∑ —Ñ–∞–π–ª–∞ mainwindow.ui

    // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ 2)
    ui->labelUrav3->setVisible(false);
    ui->labelUrav4->setVisible(false);
    ui->labelUrav5->setVisible(false);
    ui->lineEditUrav3->setVisible(false);
    ui->lineEditUrav4->setVisible(false);
    ui->lineEditUrav5->setVisible(false);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞
    setFocusToFirstEmptyField();
}

// –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
void MainWindow::setFocusToFirstEmptyField() {
    if (ui->lineEditUrav1->text().isEmpty()) {
        ui->lineEditUrav1->setFocus();
    } else if (ui->lineEditUrav2->text().isEmpty()) {
        ui->lineEditUrav2->setFocus();
    } else if (uravCount >= 3 && ui->lineEditUrav3->text().isEmpty()) {
        ui->lineEditUrav3->setFocus();
    } else if (uravCount >= 4 && ui->lineEditUrav4->text().isEmpty()) {
        ui->lineEditUrav4->setFocus();
    } else if (uravCount >= 5 && ui->lineEditUrav5->text().isEmpty()) {
        ui->lineEditUrav5->setFocus();
    }
}

void MainWindow::keyPressEvent(QKeyEvent *event) {
    if (event->key() == Qt::Key_Return || event->key() == Qt::Key_Enter) {
        QList<QLineEdit*> fields = {
            ui->lineEditUrav1,
            ui->lineEditUrav2,
            ui->lineEditUrav3,
            ui->lineEditUrav4,
            ui->lineEditUrav5
        };

        for (int i = 0; i < fields.size(); ++i) {
            if (fields[i]->hasFocus()) {
                // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ
                for (int j = i + 1; j < fields.size(); ++j) {
                    if (fields[j]->isVisible()) {
                        fields[j]->setFocus();
                        return;
                    }
                }
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ –ø–æ–ª—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                QMessageBox::information(this, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è",
                                         "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ\", —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ.");
                return;
            }
        }
    }

    QMainWindow::keyPressEvent(event);  // –ø–µ—Ä–µ–¥–∞—ë–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É
}

// –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
MainWindow::~MainWindow()
{
    delete ui; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç UI
}

// –°–ª–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
void MainWindow::slot_show(QString login)
{
    Q_UNUSED(login); // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å warning)
    this->show();    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏—è
void MainWindow::on_pushButtonAddUrav_clicked()
{
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ (5 —É—Ä–∞–≤–Ω–µ–Ω–∏–π)
    if (uravCount >= 5) {
        QMessageBox::warning(this, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º",
                             "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —É—Ä–∞–≤–Ω–µ–Ω–∏–π");
        return;
    }

    // –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø–æ–ª–µ–π —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    QLineEdit* uravEdits[] = {
        ui->lineEditUrav1,
        ui->lineEditUrav2,
        ui->lineEditUrav3,
        ui->lineEditUrav4,
        ui->lineEditUrav5
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ª—è ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç–æ–µ, —Å—Ç–∞–≤–∏–º —Ç—É–¥–∞ —Ñ–æ–∫—É—Å –∏ –≤—ã—Ö–æ–¥–∏–º
    for (int i = 0; i < uravCount; ++i) {
        if (uravEdits[i]->text().trimmed().isEmpty()) {
            uravEdits[i]->setFocus();
            QMessageBox::warning(this, "–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ",
                                 "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ.");
            return;
        }
    }

    // –í–∫–ª—é—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –∏ –¥–∞–µ–º —Ñ–æ–∫—É—Å
    switch(uravCount) {
    case 2:
        ui->labelUrav3->setVisible(true);
        ui->lineEditUrav3->setVisible(true);
        ui->lineEditUrav3->setFocus();
        break;
    case 3:
        ui->labelUrav4->setVisible(true);
        ui->lineEditUrav4->setVisible(true);
        ui->lineEditUrav4->setFocus();
        break;
    case 4:
        ui->labelUrav5->setVisible(true);
        ui->lineEditUrav5->setVisible(true);
        ui->lineEditUrav5->setFocus();
        break;
    }

    uravCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
}


void MainWindow::displaySolution(const QJsonObject& response) {
    QString solutionText;

    if (response.contains("steps")) {
        QJsonArray steps = response["steps"].toArray();
        for (const auto& step : steps)
            solutionText += step.toString() + "\n";
    }

    if (!solutionWindow)
        solutionWindow = new Solution(this);

    solutionWindow->setSolutionText(solutionText);
    solutionWindow->show();
    solutionWindow->raise();
    solutionWindow->activateWindow();
}


void MainWindow::on_pushButtonSolveUrav_clicked() {
    QJsonObject request;
    request["action"] = "solve";

    QJsonArray equations;
    equations.append(ui->lineEditUrav1->text());
    equations.append(ui->lineEditUrav2->text());

    if (uravCount >= 3) equations.append(ui->lineEditUrav3->text());
    if (uravCount >= 4) equations.append(ui->lineEditUrav4->text());
    if (uravCount >= 5) equations.append(ui->lineEditUrav5->text());

    request["equations"] = equations;

    NetworkClient::instance().sendSolutionRequest(
        request,
        [this](bool success, const QString& result) {

            qDebug() << "–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:" << result; // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            if (success) {
                QJsonDocument doc = QJsonDocument::fromJson(result.toUtf8());
                QJsonObject response = doc.object();

                if (response["status"] == "success") {
                    //displaySolution(response["solution"].toString());
                    //QString solutionText = response["solution"].toString();  // <- –∑–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                    displaySolution(response);
                } else {
                    // üîΩ –í–æ—Ç —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏:
                    QString errorText = response["message"].toString();
                    if (errorText.trimmed().isEmpty())
                        errorText = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";

                    QMessageBox::critical(this, "Error", errorText);
                }
            } else {
                // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∞ —Å–µ—Ç–µ–≤–æ–º —É—Ä–æ–≤–Ω–µ
                QString errorText = result.trimmed();
                if (errorText.isEmpty())
                    errorText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.";
                QMessageBox::critical(this, "Error", errorText);
            }
        });
}

